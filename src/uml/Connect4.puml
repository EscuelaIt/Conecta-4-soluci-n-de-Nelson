@startuml

class GameView {
-game
-boardView
-turnView
-storageView
  -init()
  -onUpdate(column)
  visitUserPlayer() 
  visitMachinePlayer()
  -loadGame()
}

GameView ..> NumPlayersDialog
GameView ..> ResumeDialog

class NumPlayersDialog extends ButtonsDialog {
    constructor(callback) 
}

class ResumeDialog extends ButtonsDialog {
    constructor(callback) 
}

class ResumeDialog

class BoardView {
-board
-messageDialog
  constructor(board)
  render()
  -getRow(row)
  addUpdateListener(onUpdate)
  updateResults()
  validateColumn(column)
}

 class MessageDialog {
 -board
 -article
    constructor(board) 
    updateResults()
    updateValidation(column)
}


BoardView ..> MessageDialog

class TurnView {
-turn
  constructor(turn)
  #update() 
  dropToken(column) 
  visitUserPlayer(userPlayer) 
  visitMachinePlayer(machinePlayer)
}

class ButtonsDialog {
-buttons
createButtons()
addButton()
deleteButtons()
getButtons()
}

class StorageView{
-gameStorage
-loadGameCallback
constructor(loadGameCallBack)
render(game)
-getSavedGames()
-createDeleteLabel(gameElement, gameId)
getGameById(gameId)
}

StorageView ..> StorageDialog

class GameStorage{
getAllGamesIds()
saveGame(game)
getGameById(gameId)
deleteGame(gameId)
}

class StorageDialog extends ButtonsDialog{
constructor(callback)
}

package models {
class Game
class Turn
abstract class Player
class RandomMachinePlayer
class UserPlayer
class Board
}

GameView *--down-> StorageView
StorageView *-down-> GameStorage

GameView -down-> Game
GameView *-down-> TurnView
GameView *-down-> BoardView
BoardView -down-> Board
TurnView -down-> Turn
Game *-down-> Turn
Turn *-down-> "2" Player
Game *-down-> Board
Player -down-> Board
Player <|-- RandomMachinePlayer
Player <|-- UserPlayer

@enduml